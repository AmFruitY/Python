
Luminance Function

def L(im):
    
    imR = im[:,:,0]
    imG = im[:,:,1]
    imB = im[:,:,2]
    
    L = 0.299*np.double(imR) + 0.587*np.double(imG) + 0.114*np.double(imB)
    
    return L
    
Entropy

def loc_entropy(im,hood):
    
    shape = np.shape(im)
    s = int((hood-1)/2)
    entr = np.zeros(shape)
    
    for i in range(s,shape[0]-s):
        for j in range(s,shape[1]-s):
            h = sp.histogram(im[i-s:i+s+1,j-s:j+s+1],0,255,256)
            S = 0
            for freq in h:
                p = freq/hood**2
                S -= p*np.log2(p+ 10**-15)
            entr[i,j] = S
    return entr

skimage.filters.rank.entropy(image, footprint, ...)

    - image has to be uint8, uint16
    - footprint or hood has to be 0s or 1s


Prewitts' Filter

im = np.double(im)
imcanny = np.double(imcanny)
imchambole = np.double(imchambole)

prex = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]], dtype=np.double)
prey = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]], dtype=np.double)

impre = np.sqrt(ndimage.filters.convolve(im, prex)**2 + ndimage.filters.convolve(im, prey)**2)
imcannypre = np.sqrt(ndimage.filters.convolve(imcanny, prex)**2 + ndimage.filters.convolve(imcanny, prey)**2)
imchambolepre = np.sqrt(ndimage.filters.convolve(imchambole, prex)**2 + ndimage.filters.convolve(imchambole, prey)**2)
